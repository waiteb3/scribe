package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _src_init_fish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcf\xc1\x6a\xe3\x30\x10\xc6\xf1\xb3\xf5\x14\x1f\xce\x1e\x12\x88\x21\xe4\xb4\xd7\xdd\xec\x75\x49\x09\x2d\x3d\x94\x12\x26\xd2\xd8\x1e\x50\x24\x33\x52\x4c\x1d\xfa\xf0\xc5\x76\x5a\x28\xb4\xd5\x4d\xf0\xd7\x8f\x4f\x0b\xec\x62\x37\xa8\x34\x6d\xc6\x72\xb7\xc2\x5f\xa5\xe0\x62\xc0\x23\x49\x66\x6c\x37\xdb\x0d\x50\xe1\x8f\xf7\x38\x8c\x4d\xc2\x81\x13\x6b\xcf\xce\x2c\xf0\x10\xe8\x92\xdb\xa8\x72\x65\x07\x1b\xbb\x41\x42\x83\x58\x23\xb7\x92\x50\x8b\xe7\x35\x7a\x21\x50\x18\x70\x66\x27\x97\xf3\x1a\x92\x90\xb2\x8a\xcd\x7e\x40\xa7\xb1\x95\x93\xe4\xc9\xba\xd3\xd8\xa9\x70\x26\x1d\x46\xb9\x73\x94\xd9\xe1\x34\x7c\x1e\xb4\xc6\x7f\x1a\xb0\xfd\x3d\x0d\x33\xa6\xbe\x04\x9b\x25\x06\x1c\x93\x55\x39\x71\xa5\x6c\xa3\x3a\x56\x54\x55\x0c\x15\xf7\x1c\x32\x6a\x49\xed\xb1\x53\xe6\x17\xb6\xa6\x98\x43\xcc\x21\x7e\x91\x36\xbd\xe1\xe0\xbe\xb4\x3c\x53\x62\x53\x48\x8d\x27\x54\x57\x94\x53\x5d\xe2\xd9\x14\x45\xe2\x8c\xf1\x86\x92\xbc\x2f\x4d\x31\x12\x63\x38\x7e\x2e\x34\x38\x53\xb6\xed\xac\xa3\x5c\xbe\xaf\x7a\x25\xef\x57\xa5\xc1\xed\x7c\xbb\xfe\xa3\x98\xd4\x1f\xe9\xc4\xa4\xb6\xbd\xc1\x45\xb1\xc0\xfd\xfe\xdf\x7e\x7e\xc3\xc1\xbd\x05\x00\x00\xff\xff\xaf\x27\x2a\x5b\xdd\x01\x00\x00")

func src_init_fish() ([]byte, error) {
	return bindata_read(
		_src_init_fish,
		"src/init.fish",
	)
}

var _src_init_zsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xc1\x31\xd8\x86\x08\xfa\xcb\xd3\x8f\x0d\x43\x9b\x90\xd2\x3e\x6c\x2d\xca\xb2\x31\x4a\x67\x14\xfb\x3a\x16\x53\x2d\x23\x29\x61\x4e\x9a\x7d\xf6\x91\xb8\xd9\x48\xf6\x87\xea\xf1\xde\x73\xce\x3d\x3a\x67\x80\x89\x69\x3b\xab\x96\xb5\x47\x32\x49\x31\xb6\xb2\x29\x4d\x83\x4f\x52\x79\xc2\xe8\x62\x74\x01\x70\x5c\x69\x0d\xb1\xc7\x38\x08\x72\x64\xd7\x54\xb2\x01\xe6\x8d\x5c\xf9\xda\x58\xb5\xa1\x12\x85\x69\x3b\xd5\x2c\x61\x2a\xf8\x5a\x39\x54\x4a\xd3\x10\x6b\x25\x21\x9b\x0e\x4f\x54\xaa\xd5\xd3\x10\xca\xc1\x79\xab\x0a\xaf\x3b\xb4\xd6\xd4\x6a\xa1\xfc\x41\xeb\xde\x9a\xd6\x2a\xf2\xd2\x76\x7b\xe5\xb6\x94\x9e\x4a\x2c\xba\x53\x43\x43\xbc\x93\x1d\x46\xff\x1f\x8c\x31\x96\xbb\xc2\xaa\x05\x71\x4b\x85\xb1\x25\xd9\x24\xc5\x96\x05\xfd\x10\xfd\x10\x61\xf4\x5f\xc8\x76\xac\xb5\x44\xdf\xa8\xc8\xab\x55\x53\x78\x65\x1a\x97\x25\xe7\xec\xf4\xa7\x5e\xad\x9c\x37\xb6\xeb\xe5\x06\x18\xcf\xaf\xaf\xa7\x22\x8b\x92\x17\x65\x47\xd2\x16\x35\x38\x57\x8d\x27\x2b\x0b\xaf\xd6\x04\xce\x4b\x5a\xac\x96\xdc\x69\xa2\xb6\x4b\x59\xf0\x1a\x56\xca\x82\xc9\x5c\xcc\xee\x44\x16\x6d\x07\x3d\x61\xb7\xbf\xb8\xd1\x04\x2e\xc0\x0b\xb6\x63\xf9\x6c\x22\x6e\xc7\xd3\xfc\x5e\x4c\x3f\xe6\x37\xb7\xb3\x0f\x77\xe2\x73\x3e\x9b\x5e\x89\xc9\x4d\x16\x25\x0b\xd5\x94\x5f\xa9\x43\xfc\x45\xc4\x78\x46\xb1\xf2\xe0\x65\x8c\x18\xbc\x1a\xa5\xec\xa0\xf3\x1e\x67\xff\x62\x27\xa4\xf3\xe5\xaf\x58\x34\x49\x47\x7d\x08\xd2\x2e\x5d\x16\x5d\xb2\x40\x55\x78\x00\xdf\x20\x8c\x2e\x43\x3c\xbe\x85\xaf\xa9\x61\x41\xbf\x0f\xa5\xd6\x21\x0b\x2a\xc5\x7a\xdc\x03\xc2\x68\xbf\x08\x91\x7d\x47\x98\x1c\x73\x7e\x96\x5a\xa7\x21\x1e\x8f\x6c\xbc\x3c\x2a\x6a\x83\x58\xf4\x67\x4b\x1c\xe1\x31\x0b\x82\x3f\xb4\x17\x6d\x7f\x1b\xbe\x19\x9c\x57\xba\x4b\xff\x6e\xa7\xef\xe3\x95\x66\x7a\xf0\xde\xca\x49\x76\xd1\x3f\xca\x39\x5c\xde\xb1\x1f\x01\x00\x00\xff\xff\xb9\x51\x79\xc8\x61\x03\x00\x00")

func src_init_zsh() ([]byte, error) {
	return bindata_read(
		_src_init_zsh,
		"src/init.zsh",
	)
}

var _src_schema_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xbd\x6a\xeb\x40\x10\x47\xf1\x5e\x4f\xf1\x2f\x6d\x90\x40\xa8\xba\x70\x2b\x59\xd9\x22\x10\x43\x10\x1b\x92\x2e\xac\xb5\x63\x6b\x40\xfb\xc1\xec\x58\xb0\x79\xfa\x10\xa7\x4a\x7f\x38\xfc\xba\x0e\x53\xca\x55\xf8\xb6\x2a\x0e\xd3\x11\x27\x71\xd1\xa7\x88\x77\xc7\x4a\x18\xfa\xa1\x07\x3a\x8c\xdb\x86\xf9\xa7\x29\x98\xa9\x90\xec\xe4\x9b\xae\xc3\x5b\x74\x77\x5d\x93\xf0\x17\x79\x2c\x29\x57\x8e\x37\xa4\x2b\x74\xe5\x82\x2b\x6f\xd4\x62\x67\x07\x17\x2b\x02\x79\xbe\x87\x16\x5c\x50\x54\x78\xd1\xad\x22\x4b\x5a\xf9\xc2\xfa\x3b\x7b\x95\x94\x85\x49\x9d\xd4\xc7\x3b\x7b\xa7\xe4\x71\xa9\x7f\x4d\x2d\xce\xae\x62\xf8\xf7\xb0\x35\xcd\x34\x9b\xd1\x1a\xd8\xf1\xf4\x62\xb0\x72\xd1\x24\xf5\x73\xef\x71\x58\x52\x08\x2e\x7a\x58\xf3\x61\x5b\x28\x07\x2a\xea\x42\xc6\xd3\x68\x8d\x7d\x3e\x9b\xe3\xff\xef\x00\x00\x00\xff\xff\xc3\x9b\xad\x9b\xfc\x00\x00\x00")

func src_schema_sql() ([]byte, error) {
	return bindata_read(
		_src_schema_sql,
		"src/schema.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"src/init.fish": src_init_fish,
	"src/init.zsh": src_init_zsh,
	"src/schema.sql": src_schema_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"src": &_bintree_t{nil, map[string]*_bintree_t{
		"init.fish": &_bintree_t{src_init_fish, map[string]*_bintree_t{
		}},
		"init.zsh": &_bintree_t{src_init_zsh, map[string]*_bintree_t{
		}},
		"schema.sql": &_bintree_t{src_schema_sql, map[string]*_bintree_t{
		}},
	}},
}}
