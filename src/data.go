// Code generated by go-bindata.
// sources:
// src/init.fish
// src/init.zsh
// src/schema.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _srcInitFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x41\x4b\x3b\x31\x10\x47\xcf\x9b\x4f\xf1\x63\xdb\x43\x0b\x5d\x28\x3d\xfd\xaf\x7f\xeb\x55\x2a\x45\xf1\x20\x52\xa6\xc9\xec\xee\x40\x9a\x2c\x93\x74\x71\x8b\x1f\x5e\xb6\xad\x8a\xa0\x06\x72\x08\x79\xf3\x78\x33\xc1\x3a\x76\x83\x4a\xd3\x66\xcc\xd6\x73\xdc\x28\x05\x17\x03\x9e\x48\x32\x63\xb5\x5c\x2d\x81\x0a\xff\xbd\xc7\x76\x64\x12\xb6\x9c\x58\x7b\x76\x66\x82\xc7\x40\xc7\xdc\x46\x95\x13\x3b\xd8\xd8\x0d\x12\x1a\xc4\x1a\xb9\x95\x84\x5a\x3c\x2f\xd0\x0b\x81\xc2\x80\x03\x3b\x39\x1e\x16\x90\x84\x94\x55\x6c\xf6\x03\x3a\x8d\xad\xec\x25\x9f\x5d\xf7\x1a\x3b\x15\xce\xa4\xc3\x68\xee\x1c\x65\x76\xd8\x0f\xdf\x83\x16\xb8\xa3\x01\xab\x7f\xe7\x30\x63\xea\x63\xb0\x59\x62\xc0\x2e\x59\x95\x3d\x57\xca\x36\xaa\x63\x45\x55\xc5\x50\x71\xcf\x21\xa3\x96\xd4\xee\x3a\x65\x7e\x65\x6b\x8a\x2f\xd2\x33\x25\x36\x1c\xdc\x8f\x9e\xcb\x6f\x21\x35\x9e\x51\x9d\x50\x4e\x49\x9b\xbe\xc4\x8b\x29\x8a\xc4\x19\xe3\x0b\x25\x79\x5f\x9a\x62\x54\x8c\xe0\xb8\x58\x68\x70\xa0\x6c\x5b\x4c\x2f\xc4\xec\xa3\xe8\x8d\xbc\x9f\x97\x06\xd7\xf3\x6b\xf9\x27\x71\xb6\xfe\xa9\x4e\x4c\x6a\xdb\xab\xb8\x28\x26\x78\xd8\xdc\x6e\x2e\x33\xe3\x7d\x0f\x00\x00\xff\xff\x10\x28\x1a\x7d\xda\x01\x00\x00")

func srcInitFishBytes() ([]byte, error) {
	return bindataRead(
		_srcInitFish,
		"src/init.fish",
	)
}

func srcInitFish() (*asset, error) {
	bytes, err := srcInitFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/init.fish", size: 474, mode: os.FileMode(420), modTime: time.Unix(1590790059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcInitZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xdf\x6b\xdb\x3e\x14\xc5\x9f\xad\xbf\xe2\xa0\x18\x6c\x43\x05\xfd\xe6\xe9\xcb\x86\xa1\x6d\x48\x69\x1f\xb6\x16\x65\xdd\x18\xa5\x33\x8a\x74\x1d\x8b\x39\xb6\x91\x94\x32\xb7\xcd\xfe\xf6\x11\xbb\x5d\xd7\xec\x07\xf5\xa3\xcf\xbd\xe7\x7e\x7c\x8e\x27\x98\xb5\x5d\xef\xec\xaa\x0a\x48\x67\x19\x4e\x9c\x6a\x4c\xdb\xe0\x93\xb2\x81\x30\x3d\x9c\x1e\x02\x02\xc7\x75\x0d\xb9\x9b\xf1\x90\xe4\xc9\xdd\x92\x61\x13\x5c\x35\x6a\x13\xaa\xd6\xd9\x3b\x32\xd0\x6d\xd7\xdb\x66\x85\xb6\x44\xa8\xac\x47\x69\x6b\x3a\xc0\xad\x55\x50\x4d\x8f\x35\x19\xbb\x59\x1f\xc0\x7a\xf8\xe0\xac\x0e\x75\x8f\xce\xb5\x95\x5d\xda\x30\x78\x5d\xba\xb6\x73\x96\x82\x72\xfd\xce\xb9\x33\x2a\x90\xc1\xb2\x7f\x09\x74\x80\x77\xaa\xc7\xf4\xff\x01\x8c\xb1\xc2\x6b\x67\x97\x24\x1c\xe9\xd6\x19\x72\x69\x86\x7b\x16\xe9\xb5\xc9\xe3\x14\xa3\x86\x51\x03\x8f\xff\xe3\xc8\x58\x64\x4b\x5c\x5f\x83\xc7\x7a\x6d\x38\xf2\x1c\xdc\x51\x4d\xca\x13\xc7\xcd\xcd\x5b\x84\x8a\x1a\x16\x45\xcf\xbe\x83\xc6\xa2\xd2\xb2\x2d\xeb\x1c\xd1\x37\xd2\x45\xb9\x69\x74\xb0\x6d\xe3\xf3\x74\x1f\x20\xfb\x89\x54\x59\x1f\x5a\xd7\x8f\x44\x13\x9c\x5c\x9d\x9e\xce\x65\x1e\xa7\x8f\x54\x9e\x94\xd3\x15\x84\xb0\x4d\x20\xa7\x74\xb0\xb7\x04\x21\x0c\x2d\x37\x2b\xe1\x6b\xa2\xae\xcf\x58\xf4\x9a\xad\x8c\x45\xb3\x2b\xb9\xb8\x90\x79\x7c\x3f\x19\x17\xb6\xbb\x8b\x77\x35\x41\x48\x08\xcd\xb6\xac\x58\xcc\xe4\xf9\xc9\xbc\xb8\x94\xf3\x8f\xc5\xd9\xf9\xe2\xc3\x85\xfc\x5c\x2c\xe6\xc7\x72\x76\x96\xc7\xe9\xd2\x36\xe6\x2b\xf5\x48\xbe\xc8\x04\x0f\xd0\x9b\x00\x61\x12\x24\x10\xe5\x34\x63\x83\xcf\x7b\xec\x7d\x17\x7b\xb1\xb4\x2f\xee\xe5\x37\x86\xa0\xdc\xca\xe7\xf1\xd1\x58\x01\xc4\x1d\x78\x7c\xc4\xf1\x1c\xfa\xa0\x73\x55\xd7\x7c\xc8\xfb\xb9\xaa\x9d\xc0\x91\x7f\x07\x4f\x9f\x72\x7e\x50\x75\x9d\xfd\x52\x19\x1e\x1f\xd2\x55\x8b\x44\x8e\x67\x0d\x9e\xc6\x13\x16\x45\x7f\x68\x2f\xbe\xff\xed\xe5\x9b\xc9\x7e\xa5\xdb\xec\xef\x38\x63\x1f\xaf\x84\x19\x87\x77\x28\x2f\xb2\x8b\xff\x51\xce\xe3\x8f\xf7\x23\x00\x00\xff\xff\x52\x7e\x36\x0d\xa4\x03\x00\x00")

func srcInitZshBytes() ([]byte, error) {
	return bindataRead(
		_srcInitZsh,
		"src/init.zsh",
	)
}

func srcInitZsh() (*asset, error) {
	bytes, err := srcInitZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/init.zsh", size: 932, mode: os.FileMode(420), modTime: time.Unix(1590790069, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcSchemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xbd\x6a\xeb\x40\x10\x47\xf1\x5e\x4f\xf1\x2f\x6d\x90\x40\xa8\xba\x70\x2b\x59\xd9\x22\x10\x43\x10\x1b\x92\x2e\xac\xb5\x63\x6b\x40\xfb\xc1\xec\x58\xb0\x79\xfa\x10\xa7\x4a\x7f\x38\xfc\xba\x0e\x53\xca\x55\xf8\xb6\x2a\x0e\xd3\x11\x27\x71\xd1\xa7\x88\x77\xc7\x4a\x18\xfa\xa1\x07\x3a\x8c\xdb\x86\xf9\xa7\x29\x98\xa9\x90\xec\xe4\x9b\xae\xc3\x5b\x74\x77\x5d\x93\xf0\x17\x79\x2c\x29\x57\x8e\x37\xa4\x2b\x74\xe5\x82\x2b\x6f\xd4\x62\x67\x07\x17\x2b\x02\x79\xbe\x87\x16\x5c\x50\x54\x78\xd1\xad\x22\x4b\x5a\xf9\xc2\xfa\x3b\x7b\x95\x94\x85\x49\x9d\xd4\xc7\x3b\x7b\xa7\xe4\x71\xa9\x7f\x4d\x2d\xce\xae\x62\xf8\xf7\xb0\x35\xcd\x34\x9b\xd1\x1a\xd8\xf1\xf4\x62\xb0\x72\xd1\x24\xf5\x73\xef\x71\x58\x52\x08\x2e\x7a\x58\xf3\x61\x5b\x28\x07\x2a\xea\x42\xc6\xd3\x68\x8d\x7d\x3e\x9b\xe3\xff\xef\x00\x00\x00\xff\xff\xc3\x9b\xad\x9b\xfc\x00\x00\x00")

func srcSchemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_srcSchemaSql,
		"src/schema.sql",
	)
}

func srcSchemaSql() (*asset, error) {
	bytes, err := srcSchemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/schema.sql", size: 252, mode: os.FileMode(420), modTime: time.Unix(1590710377, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"src/init.fish": srcInitFish,
	"src/init.zsh": srcInitZsh,
	"src/schema.sql": srcSchemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"src": &bintree{nil, map[string]*bintree{
		"init.fish": &bintree{srcInitFish, map[string]*bintree{}},
		"init.zsh": &bintree{srcInitZsh, map[string]*bintree{}},
		"schema.sql": &bintree{srcSchemaSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

