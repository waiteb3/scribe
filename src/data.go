// Code generated by go-bindata.
// sources:
// src/init.zsh
// src/init.fish
// src/schema.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _srcInitZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x4d\xab\xdb\x30\x10\x3c\x6b\x7f\xc5\xa2\x08\x6c\x1f\x74\x68\x8f\x2d\x86\x34\xc1\x21\xb9\x34\x45\x6e\x0a\x25\xa4\xc6\x91\xd7\xb1\xa8\xb1\x83\xec\x94\xe6\xc3\xfd\xed\x25\x51\x4c\x89\xfb\xde\x23\x3a\xce\xee\xec\x8c\x66\x92\x46\x5b\xb3\x25\x69\x49\xd7\x36\x23\xeb\x07\x78\x06\xe6\x40\x74\x20\x72\xf1\x8e\x43\x07\x7b\x4b\xf4\x9b\x74\x92\x1f\x2a\xdd\x9a\xba\x6a\x42\x7f\xc8\x0e\xa0\x47\x0a\xd3\xb4\xb5\x3d\xba\x73\x23\x9c\xac\x66\xb3\x48\x85\xc2\xbf\x5f\x6e\x28\xb5\xba\x40\x29\x4d\xd5\x92\x4d\x75\x6b\x7e\x11\x4a\x99\xd1\xf6\xb0\x93\x4d\x49\xb4\x3f\x06\xc0\x9e\x61\x05\xc0\xa6\x2b\x15\x2f\x55\x28\xce\x23\x47\xe8\xae\x8a\xa7\x92\x50\x2a\x94\x1a\x3a\x48\xe2\xa9\x5a\x4c\xa2\xe4\x8b\x8a\xbe\x25\xf3\x45\xfc\x75\xa9\xbe\x27\x71\xf4\x49\x4d\xe7\xa1\xf0\xb7\xa6\xca\x7e\xd2\x11\xbd\x1f\xca\xc3\x0b\xea\x43\x8b\x32\xf3\xd0\x43\x99\xbf\x0f\xe0\x76\xe7\x33\x0e\xfe\x05\x0f\xa4\xe1\xf0\x5f\x2c\x25\xa5\x0d\xb9\x10\x52\xbb\x6b\x42\x31\x06\x66\x72\x5c\xa3\x3c\x21\x17\x63\x8e\x9b\x8f\xd8\x16\x54\x01\x73\x73\x9e\x96\x25\x07\x96\x1b\x70\x7b\x6b\xe4\xe2\x3a\xe0\x18\xfe\x41\xee\xf7\x39\x5f\xd2\xb2\x0c\x38\x6e\x7a\x36\xde\x1f\xe9\xa2\x46\x4f\x39\xd9\x0c\xfb\x75\x0f\x18\x7b\xa1\x3d\x71\xfe\x0f\xfc\x30\x1a\x56\xda\x05\xaf\xdb\x71\x7d\x3c\x69\xc6\x2d\x5f\xad\x3c\x64\x27\xde\x28\xe7\xa6\xdc\xc1\xdf\x00\x00\x00\xff\xff\x52\xb2\x5f\x77\xa4\x02\x00\x00")

func srcInitZshBytes() ([]byte, error) {
	return bindataRead(
		_srcInitZsh,
		"src/init.zsh",
	)
}

func srcInitZsh() (*asset, error) {
	bytes, err := srcInitZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/init.zsh", size: 676, mode: os.FileMode(420), modTime: time.Unix(1588487309, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcInitFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\x31\x8e\xc2\x30\x10\x85\xe1\xda\x73\x8a\x27\xef\x16\xbb\x85\x6f\xb1\x7d\x9a\xed\x10\x8a\x8c\x33\x49\x2c\x99\x09\x1a\x9b\x08\x21\x0e\x8f\x12\x07\x2a\xc0\x9d\xa5\x7f\x3e\xbd\xfe\x2c\xa1\xc4\x49\xd0\xe6\xa0\xf1\xc0\x4e\x39\x4c\xda\xb1\xc2\xb9\x49\x1c\xcf\x2c\x05\x7d\xcc\x63\x7b\x52\xe6\x0b\x07\x32\x35\x44\x0d\xf1\xed\x75\x98\x89\xa5\x23\x7a\x61\x25\xf6\x99\xc9\xc4\x1e\x3b\xb8\x2b\xec\x5a\x5b\xec\xc9\x98\xcc\x05\xcb\x0f\xd6\xa7\x64\xc9\x2c\xc4\x12\xe6\xa2\x51\x06\x1c\x7d\x09\x63\xd5\x61\x7f\x1e\xab\x6e\x3e\xa5\x5f\x4b\xd8\xde\xdb\xf5\xcf\x62\x55\x3f\xd2\x99\xbd\x86\x71\x83\x8d\xf9\xc2\x7f\xf3\xd7\xd4\x1b\x96\xee\x1e\x00\x00\xff\xff\x6d\xd7\x84\x5b\x20\x01\x00\x00")

func srcInitFishBytes() ([]byte, error) {
	return bindataRead(
		_srcInitFish,
		"src/init.fish",
	)
}

func srcInitFish() (*asset, error) {
	bytes, err := srcInitFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/init.fish", size: 288, mode: os.FileMode(420), modTime: time.Unix(1588545790, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcSchemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xc8\xc8\x2c\x2e\xc9\x2f\xaa\x8c\x2f\x33\x50\xd0\x48\xce\xcf\xcd\x4d\xcc\x4b\x51\x08\x71\x8d\x08\xd1\x51\x28\xc9\xcc\x4d\x2d\x2e\x49\xcc\x2d\x50\x70\x71\x0c\x71\x0d\xf1\xf4\x75\xd5\xb4\x06\x04\x00\x00\xff\xff\x03\x1c\x32\x74\x3b\x00\x00\x00")

func srcSchemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_srcSchemaSql,
		"src/schema.sql",
	)
}

func srcSchemaSql() (*asset, error) {
	bytes, err := srcSchemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/schema.sql", size: 59, mode: os.FileMode(420), modTime: time.Unix(1588545790, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"src/init.zsh":   srcInitZsh,
	"src/init.fish":  srcInitFish,
	"src/schema.sql": srcSchemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"src": &bintree{nil, map[string]*bintree{
		"init.fish":  &bintree{srcInitFish, map[string]*bintree{}},
		"init.zsh":   &bintree{srcInitZsh, map[string]*bintree{}},
		"schema.sql": &bintree{srcSchemaSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
